import { BaseScene, Markup } from 'telegraf';
import { stands, users } from '../storage';

export const takeScene = new BaseScene('take');

takeScene.enter(async (ctx) => {
  const freeStands = stands.filter((stand) => stand.users.length === 0);

  if (freeStands.length === 0) {
    await ctx.reply('–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤ –Ω–µ—Ç üòû');
    return await ctx.scene.leave();
  }

  return ctx.reply(
    '–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤',
    Markup.inlineKeyboard(
      freeStands.map((stand) =>
        Markup.callbackButton(`${stand.id}`, `TAKE_${stand.id}`)
      )
    ).extra()
  );
});

takeScene.action(/^TAKE_[0-9]*$/gi, async (ctx) => {
  const pickedStandId = ctx.callbackQuery?.data?.match(/\d+/)?.[0];
  await ctx.answerCbQuery();

  const pickedStand = stands.find(
    (stand) => stand.id.toString() === pickedStandId
  );

  pickedStand?.users.push(users.find((user) => user.id === ctx.from?.id)!);

  await ctx.reply(
    `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, ${ctx.from?.first_name}, —Å—Ç–µ–Ω–¥ ${pickedStandId} —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π!`
  );
  return await ctx.scene.leave();
});

takeScene.leave(
  async (ctx) =>
    await ctx.reply(
      '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª—å–∑—É–π /status\n–ß—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å —Å—Ç–µ–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π /take'
    )
);
